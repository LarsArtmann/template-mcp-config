{
  "timestamp": "2025-08-10T04:22:42.101Z",
  "summary": {
    "total": 16,
    "successful": 5,
    "failed": 11,
    "critical": 4,
    "criticalFailed": 3,
    "results": [
      {
        "name": "deepwiki",
        "success": true,
        "details": "Remote server responded with status 404",
        "statusCode": 404,
        "critical": false,
        "description": "Remote wiki server",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "serverUrl": "https://mcp.deepwiki.com/sse"
        }
      },
      {
        "name": "context7",
        "success": true,
        "details": "Package accessible and responds to commands",
        "exitCode": 0,
        "stdout": "Usage: context7-mcp [options]\n\nOptions:\n  --transport <stdio|http|sse>  transport type (default: \"stdio\")\n  --port <number>               port for HTTP/SSE transport (default: \"3000\")\n  -h, --help    ",
        "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\n",
        "critical": true,
        "description": "Context management system",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@upstash/context7-mcp@latest"
          ],
          "env": {}
        }
      },
      {
        "name": "filesystem",
        "success": false,
        "details": "Package test failed (exit code: 1)",
        "exitCode": 1,
        "stdout": "",
        "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\nError accessing directory ${HOME}/projects: Error: ENOENT: no such file or directory, stat '${HOME}/projects'\n    at async ",
        "critical": true,
        "description": "File system access",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-filesystem",
            "${HOME}/projects",
            "${HOME}/GolandProjects",
            "${HOME}/IdeaProjects",
            "${HOME}/WebStormProjects",
            "${HOME}/Desktop",
            "/tmp"
          ],
          "env": {}
        }
      },
      {
        "name": "playwright",
        "success": true,
        "details": "Package accessible and responds to commands",
        "exitCode": 0,
        "stdout": "Usage: @playwright/mcp [options]\n\nOptions:\n  -V, --version                output the version number\n  --allowed-origins <origins>  semicolon-separated list of origins to allow the\n                    ",
        "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\n",
        "critical": false,
        "description": "Browser automation",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@playwright/mcp"
          ],
          "env": {}
        }
      },
      {
        "name": "github",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": true,
        "description": "GitHub integration",
        "envVars": [
          "GITHUB_PERSONAL_ACCESS_TOKEN"
        ],
        "envCheck": {
          "configured": [
            "GITHUB_PERSONAL_ACCESS_TOKEN"
          ],
          "missing": [],
          "warnings": [
            "GITHUB_PERSONAL_ACCESS_TOKEN: Optional (has default fallback)"
          ]
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-github"
          ],
          "env": {
            "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN:-}"
          }
        }
      },
      {
        "name": "everything",
        "success": true,
        "details": "Package accessible and responds to commands",
        "exitCode": 1,
        "stdout": "Available scripts:\n- stdio\n- sse\n- streamableHttp\n",
        "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\nUnknown script: --help\n",
        "critical": false,
        "description": "Everything server",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-everything"
          ],
          "env": {}
        }
      },
      {
        "name": "puppeteer",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "Browser automation alternative",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-puppeteer"
          ],
          "env": {}
        }
      },
      {
        "name": "memory",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": true,
        "description": "Persistent memory",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-memory"
          ],
          "env": {
            "MEMORY_FILE_PATH": "${HOME}/.cache/mcp-memory.json"
          }
        }
      },
      {
        "name": "sequential-thinking",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "Sequential reasoning",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@modelcontextprotocol/server-sequential-thinking"
          ],
          "env": {}
        }
      },
      {
        "name": "kubernetes",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "Kubernetes management",
        "envVars": [
          "KUBECONFIG"
        ],
        "envCheck": {
          "configured": [
            "KUBECONFIG"
          ],
          "missing": [],
          "warnings": [
            "KUBECONFIG: Uses environment substitution"
          ]
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "mcp-server-kubernetes"
          ],
          "env": {
            "KUBECONFIG": "${KUBECONFIG:-${HOME}/.kube/config}"
          }
        }
      },
      {
        "name": "fetch",
        "success": true,
        "details": "Package accessible and responds to commands",
        "exitCode": 0,
        "stdout": "fetch-mcp/0.0.5\n\nUsage:\n  $ fetch-mcp [...args]\n\nCommands:\n  [...args]  Start server\n\nFor more info, run any command with the `--help` flag:\n  $ fetch-mcp --help\n\nOptions:\n  --sse              Use SSE",
        "stderr": "",
        "critical": false,
        "description": "HTTP fetch utility",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "fetch-mcp"
          ],
          "env": {}
        }
      },
      {
        "name": "turso",
        "success": false,
        "details": "Package test failed (exit code: 1)",
        "exitCode": 1,
        "stdout": "[dotenv@17.2.1] injecting env (5) from .env -- tip: ⚙️  enable debug logging with { debug: true }\n",
        "stderr": "Failed to initialize server: Error: Missing required configuration: \nPlease set these environment variables or add them to your .env file.\n    at load_config (file:///Users/larsartmann/projects/templa",
        "critical": false,
        "description": "Turso database",
        "envVars": [
          "TURSO_DATABASE_URL",
          "TURSO_AUTH_TOKEN"
        ],
        "envCheck": {
          "configured": [],
          "missing": [
            "TURSO_DATABASE_URL",
            "TURSO_AUTH_TOKEN"
          ],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "mcp-turso-cloud"
          ],
          "env": {
            "TURSO_API_TOKEN": "${TURSO_API_TOKEN:-}",
            "TURSO_ORGANIZATION": "${TURSO_ORGANIZATION:-}"
          }
        }
      },
      {
        "name": "ssh",
        "success": false,
        "details": "Package test failed (exit code: 1)",
        "exitCode": 1,
        "stdout": "",
        "stderr": "file:///Users/larsartmann/projects/template-mcp-config/node_modules/ssh-mcp/build/index.js:35\n        throw new Error('Configuration error:\\n' + errors.join('\\n'));\n              ^\n\nError: Configurati",
        "critical": false,
        "description": "SSH connections",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "ssh-mcp"
          ],
          "env": {
            "SSH_HOST": "${SSH_HOST:-}",
            "SSH_USER": "${SSH_USER:-}",
            "SSH_PASSWORD": "${SSH_PASSWORD:-}",
            "SSH_KEY_PATH": "${SSH_KEY_PATH:-}"
          }
        }
      },
      {
        "name": "sqlite",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "SQLite database",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "mcp-sqlite",
            "${SQLITE_DB_PATH:-./database.db}"
          ],
          "env": {}
        }
      },
      {
        "name": "terraform",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "Infrastructure as code",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "terraform-mcp-server"
          ],
          "env": {}
        }
      },
      {
        "name": "youtube-transcript",
        "success": false,
        "details": "Test timeout after 15000ms",
        "error": "timeout",
        "critical": false,
        "description": "YouTube transcript extraction",
        "envVars": [],
        "envCheck": {
          "configured": [],
          "missing": [],
          "warnings": []
        },
        "config": {
          "command": "bunx",
          "args": [
            "-y",
            "@kimtaeyoon83/mcp-server-youtube-transcript"
          ],
          "env": {}
        }
      }
    ]
  },
  "details": [
    {
      "name": "deepwiki",
      "success": true,
      "details": "Remote server responded with status 404",
      "statusCode": 404,
      "critical": false,
      "description": "Remote wiki server",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "serverUrl": "https://mcp.deepwiki.com/sse"
      }
    },
    {
      "name": "context7",
      "success": true,
      "details": "Package accessible and responds to commands",
      "exitCode": 0,
      "stdout": "Usage: context7-mcp [options]\n\nOptions:\n  --transport <stdio|http|sse>  transport type (default: \"stdio\")\n  --port <number>               port for HTTP/SSE transport (default: \"3000\")\n  -h, --help    ",
      "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\n",
      "critical": true,
      "description": "Context management system",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@upstash/context7-mcp@latest"
        ],
        "env": {}
      }
    },
    {
      "name": "filesystem",
      "success": false,
      "details": "Package test failed (exit code: 1)",
      "exitCode": 1,
      "stdout": "",
      "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\nError accessing directory ${HOME}/projects: Error: ENOENT: no such file or directory, stat '${HOME}/projects'\n    at async ",
      "critical": true,
      "description": "File system access",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-filesystem",
          "${HOME}/projects",
          "${HOME}/GolandProjects",
          "${HOME}/IdeaProjects",
          "${HOME}/WebStormProjects",
          "${HOME}/Desktop",
          "/tmp"
        ],
        "env": {}
      }
    },
    {
      "name": "playwright",
      "success": true,
      "details": "Package accessible and responds to commands",
      "exitCode": 0,
      "stdout": "Usage: @playwright/mcp [options]\n\nOptions:\n  -V, --version                output the version number\n  --allowed-origins <origins>  semicolon-separated list of origins to allow the\n                    ",
      "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\n",
      "critical": false,
      "description": "Browser automation",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@playwright/mcp"
        ],
        "env": {}
      }
    },
    {
      "name": "github",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": true,
      "description": "GitHub integration",
      "envVars": [
        "GITHUB_PERSONAL_ACCESS_TOKEN"
      ],
      "envCheck": {
        "configured": [
          "GITHUB_PERSONAL_ACCESS_TOKEN"
        ],
        "missing": [],
        "warnings": [
          "GITHUB_PERSONAL_ACCESS_TOKEN: Optional (has default fallback)"
        ]
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-github"
        ],
        "env": {
          "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN:-}"
        }
      }
    },
    {
      "name": "everything",
      "success": true,
      "details": "Package accessible and responds to commands",
      "exitCode": 1,
      "stdout": "Available scripts:\n- stdio\n- sse\n- streamableHttp\n",
      "stderr": "Resolving dependencies\nResolved, downloaded and extracted [2]\nSaved lockfile\nUnknown script: --help\n",
      "critical": false,
      "description": "Everything server",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-everything"
        ],
        "env": {}
      }
    },
    {
      "name": "puppeteer",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "Browser automation alternative",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-puppeteer"
        ],
        "env": {}
      }
    },
    {
      "name": "memory",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": true,
      "description": "Persistent memory",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-memory"
        ],
        "env": {
          "MEMORY_FILE_PATH": "${HOME}/.cache/mcp-memory.json"
        }
      }
    },
    {
      "name": "sequential-thinking",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "Sequential reasoning",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@modelcontextprotocol/server-sequential-thinking"
        ],
        "env": {}
      }
    },
    {
      "name": "kubernetes",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "Kubernetes management",
      "envVars": [
        "KUBECONFIG"
      ],
      "envCheck": {
        "configured": [
          "KUBECONFIG"
        ],
        "missing": [],
        "warnings": [
          "KUBECONFIG: Uses environment substitution"
        ]
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "mcp-server-kubernetes"
        ],
        "env": {
          "KUBECONFIG": "${KUBECONFIG:-${HOME}/.kube/config}"
        }
      }
    },
    {
      "name": "fetch",
      "success": true,
      "details": "Package accessible and responds to commands",
      "exitCode": 0,
      "stdout": "fetch-mcp/0.0.5\n\nUsage:\n  $ fetch-mcp [...args]\n\nCommands:\n  [...args]  Start server\n\nFor more info, run any command with the `--help` flag:\n  $ fetch-mcp --help\n\nOptions:\n  --sse              Use SSE",
      "stderr": "",
      "critical": false,
      "description": "HTTP fetch utility",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "fetch-mcp"
        ],
        "env": {}
      }
    },
    {
      "name": "turso",
      "success": false,
      "details": "Package test failed (exit code: 1)",
      "exitCode": 1,
      "stdout": "[dotenv@17.2.1] injecting env (5) from .env -- tip: ⚙️  enable debug logging with { debug: true }\n",
      "stderr": "Failed to initialize server: Error: Missing required configuration: \nPlease set these environment variables or add them to your .env file.\n    at load_config (file:///Users/larsartmann/projects/templa",
      "critical": false,
      "description": "Turso database",
      "envVars": [
        "TURSO_DATABASE_URL",
        "TURSO_AUTH_TOKEN"
      ],
      "envCheck": {
        "configured": [],
        "missing": [
          "TURSO_DATABASE_URL",
          "TURSO_AUTH_TOKEN"
        ],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "mcp-turso-cloud"
        ],
        "env": {
          "TURSO_API_TOKEN": "${TURSO_API_TOKEN:-}",
          "TURSO_ORGANIZATION": "${TURSO_ORGANIZATION:-}"
        }
      }
    },
    {
      "name": "ssh",
      "success": false,
      "details": "Package test failed (exit code: 1)",
      "exitCode": 1,
      "stdout": "",
      "stderr": "file:///Users/larsartmann/projects/template-mcp-config/node_modules/ssh-mcp/build/index.js:35\n        throw new Error('Configuration error:\\n' + errors.join('\\n'));\n              ^\n\nError: Configurati",
      "critical": false,
      "description": "SSH connections",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "ssh-mcp"
        ],
        "env": {
          "SSH_HOST": "${SSH_HOST:-}",
          "SSH_USER": "${SSH_USER:-}",
          "SSH_PASSWORD": "${SSH_PASSWORD:-}",
          "SSH_KEY_PATH": "${SSH_KEY_PATH:-}"
        }
      }
    },
    {
      "name": "sqlite",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "SQLite database",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "mcp-sqlite",
          "${SQLITE_DB_PATH:-./database.db}"
        ],
        "env": {}
      }
    },
    {
      "name": "terraform",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "Infrastructure as code",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "terraform-mcp-server"
        ],
        "env": {}
      }
    },
    {
      "name": "youtube-transcript",
      "success": false,
      "details": "Test timeout after 15000ms",
      "error": "timeout",
      "critical": false,
      "description": "YouTube transcript extraction",
      "envVars": [],
      "envCheck": {
        "configured": [],
        "missing": [],
        "warnings": []
      },
      "config": {
        "command": "bunx",
        "args": [
          "-y",
          "@kimtaeyoon83/mcp-server-youtube-transcript"
        ],
        "env": {}
      }
    }
  ],
  "duration": 60
}