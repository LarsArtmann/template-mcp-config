#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

class MCPSetup {
    constructor() {
        this.platform = os.platform();
        this.arch = os.arch();
        this.projectRoot = path.dirname(__dirname);
        this.mcpConfigPath = path.join(this.projectRoot, '.mcp.json');
        this.envExamplePath = path.join(this.projectRoot, '.env.example');
        this.envPath = path.join(this.projectRoot, '.env');
    }

    log(message, type = 'info') {
        const prefix = {
            info: 'üìã',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            progress: '‚è≥'
        }[type];
        console.log(`${prefix} ${message}`);
    }

    exec(command, options = {}) {
        try {
            const result = execSync(command, {
                stdio: 'pipe',
                encoding: 'utf8',
                ...options
            });
            return result.trim();
        } catch (error) {
            throw new Error(`Command failed: ${command}\nError: ${error.message}`);
        }
    }

    detectPlatform() {
        this.log(`Detected platform: ${this.platform} ${this.arch}`);
        
        const supportedPlatforms = ['darwin', 'linux', 'win32'];
        if (!supportedPlatforms.includes(this.platform)) {
            throw new Error(`Unsupported platform: ${this.platform}`);
        }

        return {
            isMac: this.platform === 'darwin',
            isLinux: this.platform === 'linux', 
            isWindows: this.platform === 'win32'
        };
    }

    checkNodeVersion() {
        this.log('Checking Node.js version...', 'progress');
        try {
            const nodeVersion = this.exec('node --version');
            const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
            
            if (majorVersion < 16) {
                throw new Error(`Node.js v16+ required, found ${nodeVersion}`);
            }
            
            this.log(`Node.js ${nodeVersion} - OK`, 'success');
            return true;
        } catch (error) {
            this.log(`Node.js not found or invalid version: ${error.message}`, 'error');
            return false;
        }
    }

    installBun() {
        this.log('Installing Bun runtime...', 'progress');
        try {
            // Check if bun is already installed
            try {
                const bunVersion = this.exec('bunx --version');
                this.log(`Bun already installed: ${bunVersion}`, 'success');
                return true;
            } catch {
                // Bun not installed, proceed with installation
            }

            const platform = this.detectPlatform();
            
            if (platform.isWindows) {
                this.log('Installing Bun on Windows...', 'progress');
                this.exec('powershell -c "iwr bun.sh/install.ps1|iex"');
            } else {
                this.log('Installing Bun on Unix-like system...', 'progress');
                this.exec('curl -fsSL https://bun.sh/install | bash');
            }
            
            // Verify installation
            const bunVersion = this.exec('bunx --version');
            this.log(`Bun installed successfully: ${bunVersion}`, 'success');
            return true;
        } catch (error) {
            this.log(`Failed to install Bun: ${error.message}`, 'error');
            return false;
        }
    }

    createEnvironmentFile() {
        this.log('Setting up environment configuration...', 'progress');
        
        if (fs.existsSync(this.envPath)) {
            this.log('.env file already exists', 'warning');
            return;
        }
        
        if (!fs.existsSync(this.envExamplePath)) {
            this.log('.env.example not found, creating minimal .env', 'warning');
            const minimalEnv = `# MCP Configuration Environment Variables
# Generated by setup script

# Required for GitHub integration
GITHUB_PERSONAL_ACCESS_TOKEN=your_token_here

# Optional for Turso database
TURSO_DATABASE_URL=
TURSO_AUTH_TOKEN=

# Optional infrastructure settings
KUBECONFIG=\${HOME}/.kube/config
PROMETHEUS_URL=http://localhost:9090
`;
            fs.writeFileSync(this.envPath, minimalEnv);
        } else {
            fs.copyFileSync(this.envExamplePath, this.envPath);
        }
        
        this.log('.env file created - please configure your tokens', 'success');
        this.log('Edit .env file and add your GITHUB_PERSONAL_ACCESS_TOKEN', 'warning');
    }

    validateMCPConfig() {
        this.log('Validating MCP configuration...', 'progress');
        
        if (!fs.existsSync(this.mcpConfigPath)) {
            throw new Error('.mcp.json not found');
        }
        
        try {
            const config = JSON.parse(fs.readFileSync(this.mcpConfigPath, 'utf8'));
            const serverCount = Object.keys(config.mcpServers || {}).length;
            this.log(`MCP configuration valid - ${serverCount} servers configured`, 'success');
            return config;
        } catch (error) {
            throw new Error(`Invalid MCP configuration: ${error.message}`);
        }
    }

    installPlaywrightBrowsers() {
        this.log('Installing Playwright browsers...', 'progress');
        try {
            this.exec('bunx playwright install', { timeout: 300000 }); // 5 minute timeout
            this.log('Playwright browsers installed', 'success');
        } catch (error) {
            this.log(`Failed to install Playwright browsers: ${error.message}`, 'warning');
        }
    }

    testMCPServerAccess() {
        this.log('Testing MCP server package access...', 'progress');
        
        const testServers = [
            '@upstash/context7-mcp',
            '@modelcontextprotocol/server-github',
            '@modelcontextprotocol/server-filesystem',
            '@playwright/mcp'
        ];
        
        for (const server of testServers) {
            try {
                this.exec(`bunx ${server} --help`, { timeout: 30000 });
                this.log(`‚úì ${server}`, 'success');
            } catch (error) {
                this.log(`‚ö† ${server} - may need installation on first use`, 'warning');
            }
        }
    }

    createBackup() {
        if (fs.existsSync(this.mcpConfigPath)) {
            const backupPath = `${this.mcpConfigPath}.backup.${Date.now()}`;
            fs.copyFileSync(this.mcpConfigPath, backupPath);
            this.log(`Backup created: ${path.basename(backupPath)}`, 'info');
        }
    }

    displayNextSteps() {
        console.log('\nüéâ Setup Complete!\n');
        console.log('Next steps:');
        console.log('1. Edit .env file and add your GitHub token:');
        console.log('   GITHUB_PERSONAL_ACCESS_TOKEN=your_token_here');
        console.log('');
        console.log('2. Test your configuration:');
        console.log('   just validate');
        console.log('');
        console.log('3. Test MCP servers:');
        console.log('   just test');
        console.log('');
        console.log('4. Monitor server health:');
        console.log('   just health');
        console.log('');
        console.log('5. Get system status:');
        console.log('   just status');
        console.log('');
        console.log('Documentation: https://github.com/LarsArtmann/template-mcp-config');
    }

    async run() {
        try {
            console.log('üöÄ MCP Configuration Setup\n');
            
            // Platform and system checks
            this.detectPlatform();
            
            if (!this.checkNodeVersion()) {
                throw new Error('Node.js v16+ is required');
            }
            
            // Create backup
            this.createBackup();
            
            // Install dependencies
            await this.installBun();
            
            // Setup configuration
            this.createEnvironmentFile();
            this.validateMCPConfig();
            
            // Install additional dependencies
            this.installPlaywrightBrowsers();
            this.testMCPServerAccess();
            
            this.displayNextSteps();
            
        } catch (error) {
            this.log(`Setup failed: ${error.message}`, 'error');
            console.log('\nFor help, see: https://github.com/LarsArtmann/template-mcp-config/issues');
            process.exit(1);
        }
    }
}

// Run setup if called directly
if (require.main === module) {
    const setup = new MCPSetup();
    setup.run();
}

module.exports = MCPSetup;